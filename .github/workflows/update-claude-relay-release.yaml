name: Update Claude Relay Chart

on:
  schedule:
    - cron: '0 */12 * * *'
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: update-claude-relay
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Git
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Install tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Get latest release tag
        id: get_release
        env:
          REPO: Wei-Shaw/claude-relay-service
        run: |
          set -euo pipefail
          echo "Fetching latest release from GitHub API..."
          # Use curl without -f to avoid immediate failure on 4xx/5xx and allow fallback
          latest_json=$(curl -sSL "https://api.github.com/repos/${REPO}/releases/latest" || true)
          latest=$(echo "$latest_json" | jq -r '.tag_name // empty' || echo "")
          if [ -z "$latest" ] || [ "$latest" = "null" ]; then
            echo "GitHub API returned empty. Fallback to releases HTML page..."
            html=$(curl -sSL "https://github.com/${REPO}/releases" || true)
            latest=$(echo "$html" | grep -Eo 'v[0-9]+\.[0-9]+\.[0-9]+' | head -n1 || true)
          fi
          if [ -z "$latest" ]; then
            echo "Failed to determine latest release tag" >&2
            exit 1
          fi
          latest=$(echo "$latest" | tr -d '\r\n')
          echo "Latest release tag: $latest"
          echo "latest=$latest" >> "$GITHUB_OUTPUT"

      - name: Read current Chart.yaml
        id: read_chart
        env:
          CHART_FILE: charts/claude-relay/Chart.yaml
        run: |
          set -euo pipefail
          if [ ! -f "$CHART_FILE" ]; then
            echo "Chart file not found: $CHART_FILE" >&2
            exit 1
          fi
          current_app=$(grep -E '^appVersion:' "$CHART_FILE" | awk '{print $2}')
          current_ver=$(grep -E '^version:' "$CHART_FILE" | awk '{print $2}')
          if [ -z "$current_app" ] || [ -z "$current_ver" ]; then
            echo "Failed to read current appVersion/version from $CHART_FILE" >&2
            echo "File contents:"; sed -n '1,60p' "$CHART_FILE"
            exit 1
          fi
          echo "Current appVersion: $current_app"
          echo "Current version: $current_ver"
          echo "current_app=$current_app" >> "$GITHUB_OUTPUT"
          echo "current_ver=$current_ver" >> "$GITHUB_OUTPUT"

      - name: Decide if update is needed
        id: decision
        run: |
          set -euo pipefail
          latest="${{ steps.get_release.outputs.latest }}"
          current_app="${{ steps.read_chart.outputs.current_app }}"
          if [ "$latest" = "$current_app" ]; then
            echo "Chart appVersion already up-to-date: $latest"
            echo "update_needed=false" >> "$GITHUB_OUTPUT"
          else
            echo "Update needed: chart appVersion=$current_app, latest=$latest"
            echo "update_needed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Bump chart version & update appVersion
        id: bump
        if: steps.decision.outputs.update_needed == 'true'
        env:
          CHART_FILE: charts/claude-relay/Chart.yaml
        run: |
          set -euo pipefail
          latest="${{ steps.get_release.outputs.latest }}"
          current_ver="${{ steps.read_chart.outputs.current_ver }}"
          # Validate semantic version (x.y.z)
          if ! echo "$current_ver" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Invalid chart version format: $current_ver" >&2
            exit 1
          fi
          major=$(echo "$current_ver" | cut -d. -f1)
          minor=$(echo "$current_ver" | cut -d. -f2)
          patch=$(echo "$current_ver" | cut -d. -f3)
          new_ver="${major}.${minor}.$((patch+1))"
          # Update Chart.yaml in-place
          sed -i -E "s/^appVersion: .*/appVersion: ${latest}/" "$CHART_FILE"
          sed -i -E "s/^version: .*/version: ${new_ver}/" "$CHART_FILE"
          echo "Bumped chart version: $current_ver -> $new_ver"
          echo "Updated appVersion to: $latest"
          echo "new_ver=$new_ver" >> "$GITHUB_OUTPUT"

      - name: Show diff
        if: steps.decision.outputs.update_needed == 'true'
        run: |
          git --no-pager diff -- charts/claude-relay/Chart.yaml || true

      - name: Create Pull Request
        if: steps.decision.outputs.update_needed == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore(claude-relay): bump chart ${{ steps.read_chart.outputs.current_ver }} -> ${{ steps.bump.outputs.new_ver }}, appVersion ${{ steps.read_chart.outputs.current_app }} -> ${{ steps.get_release.outputs.latest }}"
          title: "chore(claude-relay): update chart to ${{ steps.get_release.outputs.latest }}"
          author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          committer: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          base: main
          body: |
            Automated update:
            - appVersion: ${{ steps.read_chart.outputs.current_app }} -> ${{ steps.get_release.outputs.latest }}
            - version patch: ${{ steps.read_chart.outputs.current_ver }} -> ${{ steps.bump.outputs.new_ver }}

            Source: https://github.com/Wei-Shaw/claude-relay-service/releases
          branch: chore/claude-relay-${{ steps.get_release.outputs.latest }}
          branch-suffix: timestamp
          signoff: true
          delete-branch: true
          labels: |
            chore
            automated
          add-paths: |
            charts/claude-relay/Chart.yaml